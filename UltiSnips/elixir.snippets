# Elixir

# Helper functions

global !p
import vim
import os.path

def val_or_nil(tx):
  return ('nil' if tx == '_' else tx)

def elixir_mix_module_name():
  current_file_path_without_ext = vim.eval('expand("%:p:r")') or ""
  m = re.search(r'/lib(.+)$', current_file_path_without_ext)
  name_parts = m.group().split('/lib/')[-1].split('/')
  return '.'.join(map(lambda x:x.capitalize(), name_parts))

endglobal

# Snipets

snippet mod
__MODULE__
endsnippet

#snippet mod
#`!p snip.rv = elixir_mix_module_name()`
#endsnippet

snippet bp
IEx.pry
endsnippet

snippet defin "def function(n), do: n"
def ${1:name}, do: ${2}
endsnippet

snippet defpin
defp ${1:name}, do: ${2}
endsnippet

snippet defmo
defmodule ${1:`!p snip.rv = elixir_mix_module_name()`} do
  ${2}
end
endsnippet

snippet defst
defmodule ${1:`!p snip.rv = elixir_mix_module_name()`} do
  ${2:@derive [Access]}

  defstruct ${3:fields}
  @type t :: %__MODULE__{$0$3}

  def new, do: %$1{}
end
endsnippet

snippet defsup
defmodule ${1:`!p snip.rv = elixir_mix_module_name()`} do
  use Supervisor

  def start_link${2:()} do
    Supervisor.start_link(__MODULE__, ${3:nil})
  end

  def init(${4:_}) do
    processes = [worker(${5:ModuleName}, [${6:params}])$0]
    supervise(processes, strategy: ${7::one_for_one})
  end
end
endsnippet

snippet defgs
defmodule ${1:`!p snip.rv = elixir_mix_module_name()`} do

  use GenServer

  @doc """
  ${2}
  """

  def start(${3:_}) do
    GenServer.start_link(__MODULE__, `!p snip.rv = the_val = val_or_nil(t[2])`)
  end

  def init($3) do
    {:ok, `!p snip.rv = the_val`}
  end
$0
  def handle_cast({:}, state) do
    {:noreply, state}
  end

  def handle_call({:}, _caller, state) do
    {:reply, result, state}
  end
end
endsnippet

snippet defim
defimpl ${1:protocol_name}, for: ${2:`!p snip.rv = elixir_mix_module_name()`} do
  def $3 do
    $0
  end
end
endsnippet

snippet defimc
defimpl String.Chars, for: ${1:`!p snip.rv = elixir_mix_module_name()`} do
  def to_string(${2:struct}) do
    $2$0
  end
end
endsnippet

snippet defimlc
defimpl List.Chars, for: ${1:`!p snip.rv = elixir_mix_module_name()`} do
  def to_char_list(${1:thing}) do
    $0
  end
endsnippet

snippet defima
defimpl Access, for: ${1:`!p snip.rv = elixir_mix_module_name()`} do
  def get(${2:obj}, ${3:key}) do
    $0
  end

  def get_and_update($2, $3, ${4:fun}) do
  end
end
endsnippet
