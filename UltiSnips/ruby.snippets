# Ruby

# Helper functions

global !p
import vim
import os.path

def val_or_nil(tx):
  result = tx
  if result and result[0] == '(':
    result = result[1:]
  if result and result[-1] == ')':
    result = result[:-1]
  if result == '_' or result == '':
    result = 'nil'
  return result

def val_or_ignore(tx):
  result = tx
  if result and result[0] == '(':
    result = result[1:]
  if result and result[-1] == ')':
    result = result[:-1]
  if result == '':
    result = '_'
  return result

def ruby_module_name():
  current_file_path_without_ext = vim.eval('expand("%:p:r")') or ""
  m = re.search(r'/app(.+)$', current_file_path_without_ext)
  if m:
    name_parts = m.group().split('/\//')[-1].split('/')[3:]
  else:
    m = re.search(r'/lib(.+)$', current_file_path_without_ext)
    name_parts = m.group().split('/\//')[-1].split('/')[2:]
  cap_module_part = lambda np:''.join(map(lambda x:x.capitalize(), np.split('_')))
  capitalized_name_parts = map(cap_module_part, name_parts)

  return '::'.join(capitalized_name_parts)

endglobal

# Snippets
snippet mod
module ${1:`!p snip.rv = ruby_module_name()`} do
  ${2}
end
endsnippet

snippet cl
class ${1:`!p snip.rv = ruby_module_name()`} do
  ${2}
end
endsnippet

snippet bp
binding.pry
endsnippet

snippet bb
byebug
endsnippet
